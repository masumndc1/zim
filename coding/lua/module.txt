

... 
... module: and use functions from other lua files in lua.
... for example following code.
... 

❯ cat operations.lua
#!/usr/local/bin/lua

-- this file will do following operations

local M = {}

function M.fileexists(name)
    local f=io.open(name,"r")
    if f~=nil then
       io.close(f)
       print("file exist")
       return true
    else
       print("file does not exist")
       return false
    end
end

function M.runcommand(name)
    local res = os.execute(name)
    if res then print("executed") else print("not executed") end
end

return M

... this the above lua table M and its return whenever call it.
... we can use element of the table M in other lua program. See below.

... 

❯ cat practise.lua
#!/usr/local/bin/lua

local operations = require "operations"
-- use the functions from operations.lua file

operations.fileexists(arg[1])
operations.runcommand("ping -c 2 yahoo.com")

... another way of doing so
... 
... 

❯ cat show.lua
#!/usr/local/bin/lua

function ping_me(num, add)
  os.execute("ping -c" .. num .. add)
end

... now use the function from show.lua in another file.

❯ cat use_show.lua
#!/usr/local/bin/lua

require("show")

ping_me(3, www.google.co)

... 

... some say placing module(..., package.seeall) at the 
... begining of the file can make this lua file as module.
... 
