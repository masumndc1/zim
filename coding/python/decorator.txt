

.. decorator in python can extend functionality of another function.
.. consider the following.

#!/usr/bin/env python3

def make_pretty(func):
    def inner():
        print("I got decorated")
        func()
    return inner


@make_pretty
def ordinary():
    print("I am ordinary")

@make_pretty
def extraordinary():
    print("I am extra-ordinary")


ordinary()
extraordinary()

.. output
I got decorated
I am oridinary

..
.. here, when you call ordinary(), it is called as
.. make_pretty(oridinary) which goes to make_pretty(func).
.. oridinary function executes after the inner function gets
.. executed under make_pretty function. lastly when inner function
.. get returned, everything executed in the both functions.
.. here we are running oridinary function along with make_pretty
.. where ordinary function gets executed after the make_pretty
.. function.
..
