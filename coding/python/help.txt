

... say we want to know which methods are available with a built-in
... data type, for that we want do to the following

>>> s
'khabir'
>>>
>>> a
1
>>>

... we have two data type s as string and a as numbers. so to find out
... which methods we got with string data type we use dir like below

>>> dir(s)
['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>>
>>>

... now like to know how to use __add__ methods with our string object
.. we use the help functions like below.

>>> help(s.__add__)

>>>

Help on method-wrapper object:

__add__ = class method-wrapper(object)
 |  Methods defined here:
 |
 |  __call__(...)
 |      x.__call__(...) <==> x(...)
 |
 |  __cmp__(...)
 |      x.__cmp__(y) <==> cmp(x,y)
 |
 |  __getattribute__(...)
 |      x.__getattribute__('name') <==> x.name
 |
 |  __hash__(...)
 |      x.__hash__() <==> hash(x)
 |
 |  __repr__(...)
 |      x.__repr__() <==> repr(x)
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __objclass__
 |
 |  __self__

... we can also ask for help for our string s like below.

Help on class str in module __builtin__:

class str(basestring)
 |  str(object='') -> string
 |
 |  Return a nice string representation of the object.
 |  If the argument is a string, the return value is the same object.
 |
 |  Method resolution order:
 |      str
 |      basestring
 |      object
 |
 |  Methods defined here:
 |
 |  __add__(...)
 |      x.__add__(y) <==> x+y
 |
 |  __contains__(...)
 |      x.__contains__(y) <==> y in x
 |
 |  __eq__(...)
 |      x.__eq__(y) <==> x==y
 |
 |  __format__(...)
 |      S.__format__(format_spec) -> string
 |
 |      Return a formatted version of S as described by format_spec.
 |
 |  __ge__(...)
 |      x.


... we can see the type of a object by using the type functions like below

>>> type(f)
<type 'file'>
>>>
>>>
>>> type(s)
<type 'str'>
>>>
>>> type(a)
<type 'int'>
>>>

... now we can see the help and dir of int.
...
... another good source of documentation is pydoc.
...
... pydoc sys
...
... if I need to browse python help i should do following
... pydoc -p 0
...
... you can try with
... python3 -m pydoc os
... python3 -m pydoc os.path

... there is another way to invoke the help menu.

>>> s = "hello"
>>> type(s)
<class 'str'>
>>>
>>> s.__dir__()
['__repr__', '__hash__', '__str__', '__getattribute__', '__lt__', '__le__',
'__eq__', '__ne__', '__gt__', '__ge__', '__iter__', '__mod__', '__rmod__',
'__len__', '__getitem__', '__add__', '__mul__', '__rmul__', '__contains__',
'__new__', 'encode', 'replace', 'split', 'rsplit', 'join', 'capitalize',
'casefold', 'title', 'center', 'count', 'expandtabs', 'find', 'partition',
'index', 'ljust', 'lower', 'lstrip', 'rfind', 'rindex', 'rjust', 'rstrip',
'rpartition', 'splitlines', 'strip', 'swapcase', 'translate', 'upper',
'startswith', 'endswith', 'isascii', 'islower', 'isupper', 'istitle', 'isspace',
'isdecimal', 'isdigit', 'isnumeric', 'isalpha', 'isalnum', 'isidentifier',
'isprintable', 'zfill', 'format', 'format_map', '__format__', 'maketrans',
'__sizeof__', '__getnewargs__', '__doc__', '__setattr__', '__delattr__',
'__init__', '__reduce_ex__', '__reduce__', '__subclasshook__',
'__init_subclass__', '__dir__', '__class__']
>>>

... same way, methods on list can be found by following.

>>> list = [1,2,3,4]
>>> type(list)
<class 'list'>
>>> list.__dir__()
['__repr__', '__hash__', '__getattribute__', '__lt__', '__le__', '__eq__',
'__ne__', '__gt__', '__ge__', '__iter__', '__init__', '__len__', '__getitem__',
'__setitem__', '__delitem__', '__add__', '__mul__', '__rmul__', '__contains__',
'__iadd__', '__imul__', '__new__', '__reversed__', '__sizeof__', 'clear',
'copy', 'append', 'insert', 'extend', 'pop', 'remove', 'index', 'count',
'reverse', 'sort', '__doc__', '__str__', '__setattr__', '__delattr__',
'__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__',
'__format__', '__dir__', '__class__']
>>>
...

... now if we want to know more on index method of list.

>>> list.index()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: index expected at least 1 argument, got 0

>>> help(list.index())
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: index expected at least 1 argument, got 0

>>> help(list.index)

Help on built-in function index:

index(value, start=0, stop=9223372036854775807, /) method of builtins.list
instance
    Return first index of value.

    Raises ValueError if the value is not present.
(END)

... as now we know, how to pass the variable to list.index.
... as we can see by following, 1 is at 0 index position of the
... list and 3 is in the 2 index of the list.

>>> list
[1, 2, 3, 4]

>>> list.index(1)
0
>>> list.index(3)
2
>>>

>>> list
[1, 2, 3, 4]
>>> list.reverse()
>>> list
[4, 3, 2, 1]
>>>

... help on dictionary type of objects.
...
>>> map = dict()

>>> map.__dir__()
>>> sh__', '__getattribute__', '__lt__', '__le__', '__eq__',
'__ne__', '__gt__', '__ge__', '__iter__', '__init__', '__len__', '__getitem__',
'__setitem__', '__delitem__', '__contains__', '__new__', '__sizeof__', 'get',
'setdefault', 'pop', 'popitem', 'keys', 'items', 'values', 'update', 'fromkeys',
'clear', 'copy', '__reversed__', '__doc__', '__str__', '__setattr__',
'__delattr__', '__reduce_ex__', '__reduce__', '__subclasshook__',
'__init_subclass__', '__format__', '__dir__', '__class__']
>>>

... an example of map.

>>> map = { "name": "khabir",
... "age" : 40,
... "sex" : "male" }
>>>
>>> map
{'name': 'khabir', 'age': 40, 'sex': 'male'}
>>>

... an example of string

>>> s = "hello"

... an example of list

>>> list = [1,2,3,4]

... an example of tuples

>>> tuple = (1,2,3,2,3,4)

In [15]: for item in tuple:
    ...:     print(item, tuple.count(item), tuple.index(item))
    ...:

1 1 0
2 2 1
3 2 2
3 2 2
2 2 1
4 1 5

In [21]:

... example of namedtuple.

>>> from collections import namedtuple
>>> from sys import getsizeof

>>> p1 = namedtuple("Point", "x y z")(1, 2, 3)
>>> p2 = (1, 2, 3)

>>> getsizeof(p1)
64
>>> getsizeof(p2)
64

... another example of namedtuple.

>>> from collections import namedtuple
>>> Car = namedtuple("Car" , "color mileage automatic")
>>> car1 = Car("red", 3812.4, True)

>>> # Instances have a nice repr:
>>> car1
Car(color="red", mileage=3812.4, automatic=True)

>>> # Accessing fields:
>>> car1.mileage
3812.4

>>> # Fields are immtuable:
>>> car1.mileage = 12
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: can't set attribute

>>> car1.windshield = "broken"
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Car' object has no attribute 'windshield'

... an example of set

vowels = {"a", "e", "i", "o", "u"}
squares = {x * x for x in range(10)}

>>> squares = {x * x for x in range(10)}
>>> squares
{0, 1, 4, 9, 16, 25, 36, 49, 64, 81}

In [25]:
>>> squares.__dir__()
['__repr__', '__hash__', '__getattribute__', '__lt__', '__le__', '__eq__',
'__ne__', '__gt__', '__ge__', '__iter__', '__init__', '__sub__', '__rsub__',
'__and__', '__rand__', '__xor__', '__rxor__', '__or__', '__ror__', '__isub__',
'__iand__', '__ixor__', '__ior__', '__len__', '__contains__', '__new__', 'add',
'clear', 'copy', 'discard', 'difference', 'difference_update', 'intersection',
'intersection_update', 'isdisjoint', 'issubset', 'issuperset', 'pop',
'__reduce__', 'remove', '__sizeof__', 'symmetric_difference',
'symmetric_difference_update', 'union', 'update', '__doc__', '__str__',
'__setattr__', '__delattr__', '__reduce_ex__', '__subclasshook__',
'__init_subclass__', '__format__', '__dir__', '__class__']
>>>

... another example can be.

In [32]: another=set()

In [33]: for item in range(10):
    ...:     another.add(item)
    ...:     print(another)
    ...:
{0}
{0, 1}
{0, 1, 2}
{0, 1, 2, 3}
{0, 1, 2, 3, 4}
{0, 1, 2, 3, 4, 5}
{0, 1, 2, 3, 4, 5, 6}
{0, 1, 2, 3, 4, 5, 6, 7}
{0, 1, 2, 3, 4, 5, 6, 7, 8}
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

In [34]: for item in range(10):
    ...:     another.add(item)
    ...:

In [35]: print(another)
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

In [36]:
