

... source: https://www.programiz.com/python-programming/property

-- The @property Decorator
-- In Python, property() is a built-in function that creates and returns a property object. 
-- The syntax of this function is:

property(fget=None, fset=None, fdel=None, doc=None)

-- fget is function to get value of the attribute
-- fdel is function to delete the attribute
-- fset is function to set value of the attribute
-- doc is a string (like a comment)

-- As seen from the implementation, these function arguments are optional.
-- A property object has three methods, getter(), setter(), and deleter() to specify fget, fset and 
-- fdel at a later point. This means, the line:

temperature = property(get_temperature,set_temperature)
can be broken down as:

-- make empty property
temperature = property()

-- assign fget
temperature = temperature.getter(get_temperature)

-- assign fset
temperature = temperature.setter(set_temperature)

-- These two pieces of code are equivalent.
-- these can recognize that the above construct can be implemented as decorators.
-- For this, we reuse the temperature name while defining our getter and setter 
-- functions. Let's look at how to implement this as a decorator:

# Using @property decorator
class Celsius:
    def __init__(self, temperature=0):
        self.temperature = temperature

    def to_fahrenheit(self):
        return (self.temperature * 1.8) + 32

-- note here, while declaring the functions there is no options to put extra
-- parameters. 

    @property
    def temperature(self):
        print("Getting value...")
        return self._temperature

-- note here, while setter has the ability to put value as parameters with it.

    @temperature.setter
    def temperature(self, value):
        print("Setting value...")
        if value < -273.15:
            raise ValueError("Temperature below -273 is not possible")
        self._temperature = value
        
    @temperature.deleter
    def temperature(self):
        print("deleting value")
        del self._temperature

# create an object
human = Celsius(37)
print(human.temperature)
print(human.to_fahrenheit())
coldest_thing = Celsius(-300)


