

...
... learning openstack by reading puppet modules.
...
... 1. What we can learn:
...
... Configuration options:
... The module manages keystone.conf, so you’ll see how options like
... memcache_servers, database, token, and fernet are set.
...
... Deployment workflow:
... It shows how Keystone DB syncs, service registration,
... endpoints, and users/projects/roles are created.
...
... Integration:
... You’ll see how Keystone ties into other services
... (Glance, Nova, Neutron) via service catalog and endpoints.
...
... Order of operations:
... Puppet defines (define, class, anchor) enforce sequencing, ie database before service start.
...
... 2. What would not possible to learn(perhaps):
...
... What you won’t fully learn
...
... Internal Python logic:
... Puppet only sets configs, runs commands (keystone-manage, db_sync),
... and registers endpoints. It doesn’t teach you Keystone’s code internals.
...
... Keystone API behavior:
... Puppet ensures services are up and endpoints are registered,
... but you’ll need to read Keystone’s Python code or
... docs to understand why APIs behave the way they do.
...
... Token flows and auth internals:
... Puppet sets up Fernet/UUID tokens but doesn’t explain how Keystone validates and issues them.
...
... Best way to learn:
... Read puppet-keystone -> learn deployment and configuration.
... Check keystone.conf generated by Puppet -> see real settings.
... Use OpenStack CLI (openstack project list, openstack user list) -> observe Keystone in action.
... Read Keystone Python code (oslo.config + keystone/identity/) -> understand internal flows.
... Experiment: Change a Puppet manifest -> re-run -> see how it affects Keystone.
...
... for example: read classes from puppet-keystone:
... keystone (main class)
...
... Entry point that installs Keystone, sets up configs, and manages the service.
... Reads keystone.conf settings via oslo::config
... (so you learn how Puppet translates params into [DEFAULT] and other sections).
... Important for understanding: database, token provider, caching, logging.
...
... keystone::db::sync
... Runs keystone-manage db_sync.
... This is critical because Keystone won’t run without a migrated DB.
... Shows you how Puppet sequences operations (via anchor or contain).
...
... keystone::roles::admin
... Creates the admin project, admin user, and admin role.
... This is the foundation for logging in with openstack CLI.
...
... keystone::endpoint
... example of how to call it:

keystone::endpoint { 'RegionOne/identity':
  public_url   => 'http://controller:5000/v3',
  internal_url => 'http://controller:5000/v3',
  admin_url    => 'http://controller:5000/v3',
}

... keystone::service (define)
... Registers a service in Keystone (e.g., Identity, Compute, Image).
... Pairs with keystone::endpoint.

... keystone::resource::service_identity
... Creates a service user, role, and endpoint together.
... This is how Nova, Glance, Cinder, etc., get their users inside Keystone.

... keystone::config
... Low-level resource that writes directly into keystone.conf.
...
... How to study effectively:
... Open manifests/init.pp -> see class keystone.
... Check manifests/endpoint.pp and manifests/service.pp -> understand catalog registration.
... Look at examples/ folder in the module repo -> ready-made manifests.
... Run Puppet locally (with noop => true) -> inspect what it would do to keystone.conf.
...
... puppet-keystone module(also other modules) declare some dependencies in metadata.json.
... therefore, when puppet-keystone is installed it also install, apache, concat, inifile,
... stdlib, openstacklib, and oslo puppet modules.
...
... another example of ensure_resource which is coming from puppet-stdlib moduels
... (puppetlabs/stdlib/lib/puppet/parser/functions/ensure_resource.rb)
...

ensure_resource('keystone_service', 'keystone', {
  ensure      => present,
  description => 'OpenStack Identity Service',
  type        => 'identity'
})

... it has following meaning of ensure_resource
... 1. If there’s already a keystone_service { 'keystone': ... } declared, don’t duplicate.
... 2. If not, create one with the given params.
...
... another example:
...

ensure_resource('package', 'vim',
  { ensure => 'present' }
)

... it says:
... 1. If "package { 'vim': }" already exists -> nothing happens.
... 2. If not -> Puppet creates "package { 'vim': ensure => present }".
...
... summary of ensure_resource:
... 1. It’s a stdlib Puppet function.
... 2. In puppet-keystone, it’s used to safely declare resources
...    (keystone_service, keystone_endpoint, etc.) without risking
...    duplicate declaration errors.
...
