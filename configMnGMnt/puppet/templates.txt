

...
... erb file templating:
... a good url on templating on erb:
... https://www.puppet.com/docs/puppet/8/lang_template_erb.html
...
... explanation:
...

<%= variable or code %>
  This tag is replaced with the value of the variable, or result of the code.
<% code block %>
  The code is executed. Nothing is returned unless the code prints output.
<%# a comment %>
  This tag is removed from the output.
<% code block -%>
  Immediately trailing newlines or whitespace is removed. Use to prevent blank lines.
<%- code block %>
  Leading newlines or whitespace is removed. Use when indenting template tags.
<%= variable or code -%>
  Removes trailing whitespace after the result of the code.
  (There is no option for trimming leading whitespace.)
<%% %%>
  Double percent signs are replaced with a single percent sign.
  Use to prevent interpolation
<% end %>
  end of code block

...
... example of using template:
...

class alpha {
  # Get necessary value from related module 'beta'
  $important_setting = $beta::foo

  file { '/etc/alpha.conf':
    content => template('alpha/alpha.conf.erb'),
  }
}

template alpha.conf.erb:
  # this won't silently become nil if the variable reference is no longer good
  important setting = '<%= @important_setting %>'

... note above, how variable $important_settings getting value in class
... but used as @important_setting in the template. the $ and @ sign are
... important here.
...
...
... another example of using template

file { '/etc/puppetlabs/puppet/puppet.conf':
  content => template('puppet/puppet.conf.erb'),
}

... content of puppet.conf.erb in puppet/templates/puppet.conf.erb file.
...

    # Generated by Puppet ERB template processor
    [main]
        log_level = <%= @common_loglevel %>
    # This is used by "puppet agent"
    [agent]
    <% if @agent_loglevel -%>
        log_level = <%= @agent_loglevel %>
    <% end -%>
        server = <%= @server -%>
    # This is used for "puppet apply"
    [user]
    <% if @apply_loglevel -%>
        log_level = <%= @apply_loglevel %>
    <% end -%>

...
... one more example of using template

# template(<FILE REFERENCE>, [<ADDITIONAL FILES>, ...])
file { '/etc/ntp.conf':
  ensure  => file,
  content => template('ntp/ntp.conf.erb'),
  # Loads /etc/puppetlabs/code/environments/production/modules/ntp/templates/ntp.conf.erb
}

... <%= ... %> → outputs the result of the Ruby expression.
... <% ... %> → runs Ruby code but does not output anything.
...
... want to display something conditionally,
... you need <%= ... %> inside the branch where you want output.
...
... example manifests file
❯ cat manifests/summary.pp

$_family = $facts['os']['family']
$_name = $facts['os']['name']
$_release = $facts['os']['release']['full']
$_distro = $facts['os']['distro']['codename']
$_user = $facts['identity']['user']

file { "/home/${_user}":
  ensure => directory,
}

file { "/home/${_user}/summary.txt":
  ensure => 'present',
  content => template('bolt/summary.erb'),
  require => File["/home/${_user}"],
}

... example erb template file

❯ cat modules/bolt/templates/summary.erb
<%= @facts['hostname'] %>:
This machine is up for <%= @facts['system_uptime']['uptime'] %>
OS name is <%= @_name %> of <%= @_family %> family
Code name is <%= @_distro %>

<% if @facts['os']['architecture'] == 'amd64' %>
This OS architecture is <%= @facts['os']['architecture'] %>
<% end %>

... the above will generate following output at the target machine
❯ bolt apply manifests/summary.pp -t cloud-test --verbose

cloud-test ❯ cat /home/root/summary.txt
debian12:
This machine is up for 8 days
OS name is Ubuntu of Debian family
Code name is jammy

This OS architecture is amd64

... note here: how facts are used here in the if condition,

<% if condition %>
<% endif %>

...
... Use <% ... %> for the conditional, <%= ... %> to print values.
... Add @ for instance variables (@_name, @_family, @_distro)
... and @facts for the facts hash.
