



... variables in puppet follows the following rules

$myvar 		# valid . they start with small letter and underscore.
$MyVar 		# invalid as variable should start with small letter
$my_var 	# valid
$my-var 	# invalid
$my3numbers 	# valid
$3numbers 	# invalid as should not start with numbers.

... we have one sample manifest with variables

$my_name = 'masum'
$num_tokens = '030905'

notify { grettings:
 message => "hello $my_name and your roll is $num_tokens"
}

... gives output when we run it

root@controller:~/puppet/manifests# puppet apply sometest.pp

Notice: Compiled catalog for controller in environment production in 0.21 seconds
Notice: hello masum and your roll is 030905
Notice: /Stage[main]/Main/Notify[grettings]/message: defined 'message' as 'hello masum and your roll is 030905'
Notice: Applied catalog in 0.02 seconds

root@controller:~/puppet/manifests#


... another example

root@controller:~/puppet/manifests# cat sometest.pp

$my_name = 'masum'
$num_tokens = '030905'

# now watching the variable type.
# this stdlib is a module installed by
# puppet module install puppetlabs-stdlib

include stdlib
$nametype = type_of( $my_name )
$numtype = type_of( $num_tokens )

notify { valtype:
 message => "masum is $nametype and 030905 is $numtype type variable"
}

... output of the sometest.pp is

root@controller:~/puppet/manifests# puppet apply sometest.pp
Notice: Compiled catalog for controller in environment production in 0.16 seconds
Notice: hello masum and your roll is 030905
Notice: /Stage[main]/Main/Notify[grettings]/message: defined 'message' as 'hello masum and your roll is 030905'
Notice: masum is String[5, 5] and 030905 is String[6, 6] type variable
Notice: /Stage[main]/Main/Notify[valtype]/message: defined 'message' as 'masum is
String[5, 5] and 030905 is String[6, 6] type variable'
Notice: Applied catalog in 0.03 seconds
root@controller:~/puppet/manifests#


... arrays

$embedded = [4,5,['a','b']]   				# mixed of arrays.

... Array-to-array assignment works if there are equal
... variables and values:

[$first,$middle,$last] = ['md','khabir','uddin'] 	# good
[$first,$middle,$last] = ['md',undef,'uddin'] 		# good
[$first,$middle,$last] = ['md','uddin'] 		# error

myfunction( *$array_of_arguments ) { ... }

... Some functions require a list of input values, instead of an array.
... In a function call, the splat operator (*) operator will convert
... an Array into a comma-separated list of values:
... This provides a concise, readable way to pass a list of unknown size to a function.

... hashes:
... hash defination can be like below.
... Hash keys must be Scalar (string or number), but values can be any data type.
... This means that the value assigned to a key could be a nested Array or Hash.

$homes = { 'masum' => '/home/masum', 'khabir' => '/home/khabir', }

... and the usages of hashes and the array is like below.

$my_list=['bread','butter','oil']
$homes = { 'masum' => '/home/masum', 'khabir' => '/home/khabir', }
notice ( " the home directory of masum is ${homes['masum']} " )
notice ( " masum likes ${my_list[0]} with ${my_list[1]}. " )

... and the output of this is follows.

root@controller:~/puppet/manifests# puppet apply longline.pp

Notice: Scope(Class[main]):  the home directory of masum is /home/masum
Notice: Scope(Class[main]):  masum likes bread with butter.
Notice: Compiled catalog for controller in environment production in 0.15 seconds
Notice: Applied catalog in 0.02 seconds
root@controller:~/puppet/manifests#

... we have another following pp

root@controller:~/puppet/manifests# cat -n sometest.pp
     1	include stdlib
     2	# we are here making some test on variable
     3	$my_name = 'masum'
     4	$num_tokens = '030905'
     5
     6	notice ( "hello ${my_name} and your roll is ${num_tokens}" )
     7
     8	# now watching the variable type.
     9	$nametype = type_of( $my_name )
    10	$numtype = type_of( $num_tokens )
    11
    12	notice ( "masum is ${nametype} and 030905 is ${numtype} type variable" )

... and its output is follows. notice how we assign variable and how we recall.

root@controller:~/puppet/manifests# puppet apply sometest.pp
Notice: Scope(Class[main]): hello masum and your roll is 030905
Notice: Scope(Class[main]): masum is String[5, 5] and 030905 is String[6, 6] type variable
Notice: Compiled catalog for controller in environment production in 0.26 seconds
Notice: Applied catalog in 0.03 seconds
root@controller:~/puppet/manifests#

.... long line example

root@controller:~/puppet/manifests# cat -n longline.pp
     1
     2	$user='masum'
     3	$roll='030905'
     4
     5	$text = @("END")
     6	this is a long line ${user},
     7	your id therefore ${roll}
	spread over multiple lines
     8	like this.
     9	END
    10
    11	notice ( "\n\n${text}" )

root@controller:~/puppet/manifests#


root@controller:~/puppet/manifests# puppet apply longline.pp
Notice: Scope(Class[main]):

this is a long line masum,
your id therefore 030905
spread over multiple lines
like this.

Notice: Compiled catalog for controller in environment production in 0.18 seconds
Notice: Applied catalog in 0.02 seconds
root@controller:~/puppet/manifests#
