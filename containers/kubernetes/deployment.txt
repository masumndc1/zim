

... we can see that the definition is very similar to a Replication Controller.
... The main difference is that we now have an ability to make changes and
... updates to the deployment objects and let Kubernetes manage updating the
... underlying pods and replicas for us:
... we can also update the image and rollout during a deployment is running.

[root@kube-master kube]# cat node-js-deploy-service.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
     name: node-js-deploy
     labels:
       name: node-js-deploy
spec:
      replicas: 1
      template:
        metadata:
          labels:
            name: node-js-deploy
        spec:
          containers:
          - name: node-js-deploy
            image: jonbaier/pod-scaling:0.1
            ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
     name: node-js-deploy
     labels:
       name: node-js-deploy
spec:
     type: LoadBalancer
     ports:
     - port: 80
     sessionAffinity: ClientIP
     selector:
       name: node-js-deploy
[root@kube-master kube]#

... scaling the deployment if we need. changing image and watching rollout status

[root@kube-master kube]# kubectl scale deployment node-js-deploy --replicas 3
[root@kube-master kube]# kubectl set image deployment/node-js-deploy node-js-deploy=jonbaier/pod-scaling:0.2
[root@kube-master kube]# kubectl rollout status deployment/node-js-deploy


... undoing rollout

masum@controller:~$ kubectl rollout history deployments pu-dv1
deployment.apps/pu-dv1
REVISION  CHANGE-CAUSE
1         <none>

masum@controller:~$
masum@controller:~$ kubectl rollout history deployments pu-dv1 --revision=1
deployment.apps/pu-dv1 with revision #1
Pod Template:
  Labels:       app=pu-dv1
        pod-template-hash=dc84b89fb
  Containers:
   pu-dv1:
    Image:      ubuntu-salt-minion:v1.0
    Port:       <none>
    Host Port:  <none>
    Environment:        <none>
    Mounts:     <none>
  Volumes:      <none>

masum@controller:~$
[root@kube-master kube]# kubectl rollout undo deployment/node-js-deploy

... list of deployment

[root@kube-master kube]# kubectl get deployment
NAME             DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
hello-khabir     2         2         2            2           1d
hello-masum      1         1         1            1           5d
hello-world      1         1         1            1           5d
nginx            1         1         1            1           5d
nginx-node2      2         0         0            0           6d
nginx-o          3         0         0            0           6d
nginx-on         3         0         0            0           6d
nginx-test       3         4         2            0           6d
node-js-deploy   1         1         1            1           1h
rc               2         2         2            0           1d
[root@kube-master kube]#

... for my example, when i have changed pod containers ports from 8080 to 80
... and run again "kubectl apply -f files/nginx/pu-dv1.yml" its update
... automatically itself

masum@controller:~$ k get deployment -o wide
NAME     READY   UP-TO-DATE   AVAILABLE   AGE     CONTAINERS   IMAGES         SELECTOR
pu-dv1   4/4     4            4           3d23h   pu-dv1       nginx:latest   app=pu-dv1
masum@controller:~$

masum@controller:~$ kubectl apply -f files/puppet/pu-dv1.yml
deployment.apps/pu-dv1 unchanged
service/pu-dv1 unchanged
The Pod "pu-dv1" is invalid:
mage`, `spec.activeDeadlineSeconds`, `spec.tolerations` (only additions to existing tolerations)
or `spec.terminationGracePeriodSeconds` (allow it to be set to 1 if it was previously negative)
    core.PodSpe{
            Volumes:        {{Name: "kube-api-access-zbdqd", VolumeSource: {Projected:
            &{Sources: {{ServiceAccountToken: &{ExpirationSeconds: 3607, Path: "token"}},
            {ConfigMap: &{LocalObjectReference: {Name: "kube-root-ca.crt"}, Items:
            {{Key: "ca.crt", Path: "ca.crt"}}}}, {DownwardAPI: &{Items: {{Path: "namespace",
            FieldRef: &{APIVersion: "v1", FieldPath: "metadata.namespace"}}}}}}, DefaultMode: &420}}}},
                    InitContainers: nil,
                            Containers: []core.Container{
                            {                        ... // 3 identical fields
                                                    Args:       nil
            WorkingDir: "",
                   Ports:      []core.ContainerPort{{ContainerPort: 80, Protocol: "TCP"}},
                         Ports:      nil,
                         EnvFrom:    nil,
                         Env:        nil,
                         ... // 14 identical fields
    }

masum@controller:~$ k get svc pu-dv1 -o wide
NAME     TYPE        CLUSTER-IP     EXTERNAL-IP      PORT(S)    AGE   SELECTOR
pu-dv1   ClusterIP   10.106.18.86   192.168.20.168   9024/TCP   17m   app=pu-dv1
masum@controller:~$

masum@controller:~$ curl http://192.168.20.168:9024
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark;  }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
masum@controller:~$

... watching history

masum@controller:~$ kubectl rollout history deployment pu-dv1
deployment.apps/pu-dv1
REVISION  CHANGE-CAUSE
1         <none>
2         <none>

masum@controller:~$

masum@controller:~$ kubectl rollout history deployment pu-dv1 --revision=1
deployment.apps/pu-dv1 with revision #1
Pod Template:
  Labels:       app=pu-dv1
        pod-template-hash=dc84b89fb
  Containers:
   pu-dv1:
    Image:      ubuntu-salt-minion:v1.0
    Port:       <none>
    Host Port:  <none>
    Environment:        <none>
    Mounts:     <none>
  Volumes:      <none>

masum@controller:~$  kubectl rollout history deployment pu-dv1 --revision=2
deployment.apps/pu-dv1 with revision #2
Pod Template:
  Labels:       app=pu-dv1
        pod-template-hash=fc5649b7
  Containers:
   pu-dv1:
    Image:      nginx:latest
    Port:       <none>
    Host Port:  <none>
    Environment:        <none>
    Mounts:     <none>
  Volumes:      <none>
