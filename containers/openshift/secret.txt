

... in openshift a configuration can be injected to a running pod via following.

• Secrets
• Configuration maps
• Environment variables
• Downward API
• Layered builds

... secrets: it is a way to pass sensitive information (username/password/certificates)
... are passed to a running pods.

... secrets related options are

[root@openshift ~]# oc secret
Manage secrets in your project

Secrets are used to store confidential information that should not be contained inside of an image.
They are commonly used to hold things like keys for authentication to other internal systems like
Docker registries.

Aliases:
secrets, secret

Usage:
  oc secrets [options]

Available Commands:
  add           DEPRECATED: secrets link
  link          Link secrets to a ServiceAccount
  new           Create a new secret based on a key file or on files within a directory
  new-basicauth Create a new secret for basic authentication
  new-dockercfg Create a new dockercfg secret
  new-sshauth   Create a new secret for SSH authentication
  unlink        Detach secrets from a ServiceAccount

Use "oc <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).
[root@openshift ~]#

... creating secrets

[root@openshift ~]# ls
nginx.pem  openshift
[root@openshift ~]#
[root@openshift ~]# oc secret new test-secret nginx.pem
secret/test-secret
[root@openshift ~]#

... we can also create secret from multiple secrets file. ie from cert file and
... key file. an example can be like below.

[root@openshift ~]# oc secret new ssl-secret keys=key.pem certs=cert.pem

... we have following secrets are stored locally in our system

[root@openshift ~]# oc get secrets
NAME                       TYPE                                  DATA      AGE
builder-dockercfg-hzjh4    kubernetes.io/dockercfg               1         9d
builder-token-vx6x2        kubernetes.io/service-account-token   4         9d
builder-token-xdp8w        kubernetes.io/service-account-token   4         9d
default-dockercfg-kp4p9    kubernetes.io/dockercfg               1         9d
default-token-46zrs        kubernetes.io/service-account-token   4         9d
default-token-xnkl6        kubernetes.io/service-account-token   4         9d
deployer-dockercfg-q5vhv   kubernetes.io/dockercfg               1         9d
deployer-token-gj2xx       kubernetes.io/service-account-token   4         9d
deployer-token-rwrcv       kubernetes.io/service-account-token   4         9d
registry-dockercfg-gfp29   kubernetes.io/dockercfg               1         9d
registry-token-49755       kubernetes.io/service-account-token   4         9d
registry-token-fdcwd       kubernetes.io/service-account-token   4         9d
router-certs               kubernetes.io/tls                     2         9d
router-dockercfg-mpr5p     kubernetes.io/dockercfg               1         9d
router-token-9m5kf         kubernetes.io/service-account-token   4         9d
router-token-k4s77         kubernetes.io/service-account-token   4         9d
test-secret                Opaque                                1         9m
[root@openshift ~]#

... the last line test-secret is our newly created secrets.

... operation on secrets
... first creating labels on secret and then query them using labels
... and last way to delete secrets like other.

[root@openshift ~]# oc label secret test-secret env=test
secret "test-secret" labeled
[root@openshift ~]# oc get secrets --show-labels=true
NAME                       TYPE                                  DATA      AGE       LABELS
builder-dockercfg-hzjh4    kubernetes.io/dockercfg               1         9d        <none>
builder-token-vx6x2        kubernetes.io/service-account-token   4         9d        <none>
builder-token-xdp8w        kubernetes.io/service-account-token   4         9d        <none>
default-dockercfg-kp4p9    kubernetes.io/dockercfg               1         9d        <none>
default-token-46zrs        kubernetes.io/service-account-token   4         9d        <none>
default-token-xnkl6        kubernetes.io/service-account-token   4         9d        <none>
deployer-dockercfg-q5vhv   kubernetes.io/dockercfg               1         9d        <none>
deployer-token-gj2xx       kubernetes.io/service-account-token   4         9d        <none>
deployer-token-rwrcv       kubernetes.io/service-account-token   4         9d        <none>
registry-dockercfg-gfp29   kubernetes.io/dockercfg               1         9d        <none>
registry-token-49755       kubernetes.io/service-account-token   4         9d        <none>
registry-token-fdcwd       kubernetes.io/service-account-token   4         9d        <none>
router-certs               kubernetes.io/tls                     2         9d        <none>
router-dockercfg-mpr5p     kubernetes.io/dockercfg               1         9d        <none>
router-token-9m5kf         kubernetes.io/service-account-token   4         9d        <none>

[root@openshift ~]# oc delete secret test-secret
secret "test-secret" deleted
[root@openshift ~]#

... creating again the secret with the same label and name test-secret

[root@openshift ~]# pwd
/root
[root@openshift ~]# ls
nginx.pem  openshift  puppet
[root@openshift ~]# oc secret new test-secret nginx.pem
secret/test-secret
[root@openshift ~]# oc label secret test-secret env=test
secret "test-secret" labeled
[root@openshift ~]# oc get secrets --show-labels=true | grep env=test
router-token-k4s77         kubernetes.io/service-account-token   4         9d        <none>
test-secret                Opaque                                1         12m       env=test
[root@openshift ~]#

... when we have created secret we can use that with the running pod by following
... two methods.

... 1. mouting the secret as a volume.
... 2. using secret as environment variable.

... in the following example we are going to use following docker images

[root@openshift ~]# docker search openshift/nodejs
docker.io   docker.io/openshift/nodejs-010-centos7     A Centos7 based NodeJS v0.10 i...   4

[root@openshift ~]# docker pull openshift/nodejs-010-centos7:latest
Trying to pull repository docker.io/openshift/nodejs-010-centos7 ...
latest: Pulling from docker.io/openshift/nodejs-010-centos7
8d30e94188e7: Extracting [==================================================>] 70.59 MB/70.59 MB
9e0d025d6982: Download complete
e7c36c73b545: Download complete

... now we are going to use that image to build our new app like below.

[root@openshift ~]# oc new-app https://github.com/openshift/nodejs-ex --docker-image="docker.io/openshift/nodejs-010-centos7:latest"
--> Found Docker image b3b1ce7 (13 months old) from docker.io for "docker.io/openshift/nodejs-010-centos7:latest"

    Node.js 0.10
    ------------
    Platform for building and running Node.js 0.10 applications

    Tags: builder, nodejs, nodejs010

    * An image stream will be created as "nodejs-010-centos7:latest" that will track the source image
    * The source repository appears to match: nodejs
    * A source build using source code from https://github.com/openshift/nodejs-ex will be created
      * The resulting image will be pushed to image stream "nodejs-ex:latest"
      * Every time "nodejs-010-centos7:latest" changes a new build will be triggered
    * This image will be deployed in deployment config "nodejs-ex"
    * Port 8080/tcp will be load balanced by service "nodejs-ex"
      * Other containers can access this service through the hostname "nodejs-ex"

--> Creating resources ...
    imagestream "nodejs-010-centos7" created
    imagestream "nodejs-ex" created
    buildconfig "nodejs-ex" created
    deploymentconfig "nodejs-ex" created
    service "nodejs-ex" created
--> Success
    Build scheduled, use 'oc logs -f bc/nodejs-ex' to track its progress.
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose svc/nodejs-ex'
    Run 'oc status' to view your app.
[root@openshift ~]#

... rather than this deployment config we have several from previous build

[root@openshift ~]# oc get dc
NAME              REVISION   DESIRED   CURRENT   TRIGGERED BY
cotd              0          1         0         config,image(cotd:latest)
docker-registry   1          1         0         config
khulnaweb         1          1         0         config
ng112             1          1         0         config
nginx             1          1         1         config,image(nginx:latest)
router            1          1         0         config
[root@openshift ~]#

... we are going to add volume to dc nginx like below
... here in below our mount point is /etc/ssl/
... where in the pod we can find our mounted files.

[root@openshift ~]# oc volume dc/nginx --add -t secret --secret-name=test-secret -m /etc/ssl/ --name=ssl deploymentconfigs/nginx
deploymentconfig "nginx" updated
deploymentconfig "nginx" updated
[root@openshift ~]#

... adding volume will trigger the config changes and will also redeployed the pod.

... changing again the volume with --overwrite options

[root@openshift ~]# oc volume dc/nginx --add -t secret --secret-name=test-secret -m /root/ --name=ssl deploymentconfigs/nginx

error: deploymentconfigs/nginx volume 'ssl' already exists. Use --overwrite to replace
error: deploymentconfigs/nginx volume 'ssl' already exists. Use --overwrite to replace

[root@openshift ~]# oc volume dc/nginx --add -t secret --secret-name=test-secret -m /root/ --name=ssl --overwrite deploymentconfigs/nginx

deploymentconfig "nginx" updated
deploymentconfig "nginx" updated

[root@openshift ~]#

... now the pod is running. we can check that the volume is mounted from the following
... command. and the files can be accessed in /root/ directory in the pod.

[root@openshift ~]#  oc describe pod nginx-4-deploy

... checking the mounted file as follows.

[root@openshift ~]#  oc rsh nginx-4-deploy ls /root

... mounting secret as environment variable

[root@openshift ~]# cat user
masum
khabir
uddin
[root@openshift ~]# cat 123
123456
789011
121213
[root@openshift ~]#
[root@openshift ~]# oc secret new env-secrets username=user password=123
secret/env-secrets
[root@openshift ~]#

... now adding it to dc/nginx

[root@openshift ~]# oc set env dc/nginx --from=secret/env-secrets
deploymentconfig "nginx" updated
[root@openshift ~]#

[root@openshift ~]# oc env dc/nginx --list
# deploymentconfigs nginx, container nginx
# PASSWORD from secret env-secrets, key password
# USERNAME from secret env-secrets, key username
[root@openshift ~]#

... secrets are limited to only 1M space and how may secrets an user can
... create also can be controlled by admin in openshift resourcequatas.
... moreover secrets are project/namespaces dependent and can not be found
... in other project. moreover, secret should be created before the pod
... runs otherwise pod will fail to run.
... again secrets are also idempotent. once created, will be remain same
... whenever changed outside. If we need to use modified secret we need
... to restart the pod too. secret should be used for username/password/
... certificates operation.
