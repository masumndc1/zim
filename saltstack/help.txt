

... help menu in salt can call various way in saltstack.
... some of the examples are given below.

... for example, finding more about sys 

[root@saltstack masum]# salt localhost sys

[root@saltstack masum]# salt localhost sys.list_functions

... from this long list we are looking for the pkg related funtions.

[root@saltstack masum]# salt localhost sys.list_functions pkg

... from the output select your desired functions. we would like to see which
... pkg is now installed in the system.

ot@saltstack masum]# salt localhost sys.list_functions | grep pkg | grep pkg.list_pkgs
    - pkg.list_pkgs

... run the command with the following

[root@saltstack masum]# salt localhost pkg.list_pkgs

... different types of out. example is for yaml syntax

[root@saltstack masum]# salt --help | grep out
[root@saltstack masum]# salt --out=yaml localhost pkg.list_pkgs

... finding grains of minions 

[root@saltstack masum]# salt localhost sys.doc grains
[root@saltstack masum]# salt localhost grains.ls
[root@saltstack masum]# salt localhost grains.items
[root@saltstack masum]# salt localhost grains.item os uuid uid os_family

... now we can use grained information to glob minions.
... following way we can run commands on all arch based systems.

[root@saltstack masum]# salt --out=yaml localhost grains.item os os_family osarch oscodename osfullname osrelease
localhost:
  os: Arch
  os_family: Arch
  osarch: x86_64
  oscodename: Arch Linux
  osfullname: Arch Linux
  osrelease: ''
[root@saltstack masum]# 
[root@saltstack masum]# 
[root@saltstack masum]# salt --grain 'os:Arch' test.ping                    
localhost:
    True
[root@saltstack masum]# 

... list_function is the most usefull options we should use.

root@saltstack masum]# salt localhost sys.list_functions
 
for example, to search for status options for the system we can do by following

root@saltstack masum]# salt localhost sys.list_functions status

... state related document we can see by following.

[root@saltstack masum]# salt localhost sys.doc | grep doc

sys.state_doc:
    Return the docstrings for all states. Optionally, specify a state or a
    The strings are aggregated into a single document on the master for easy
        salt '*' sys.state_doc
        salt '*' sys.state_doc service
        salt '*' sys.state_doc service.running
        salt '*' sys.state_doc service.running ipables.append
        salt '*' sys.state_doc 'service.*' 'iptables.*'
    name : the id of the Salt document or it is the format of <statement name>.id
    example interval, maxTime, etc). See the documentation

... now search for a state module and functions in state document and their usages.

root@saltstack masum]# salt localhost sys.state_doc pkg service  

... the usages of watch and require.

ot@saltstack salt]# cat -n pkg.sls
     1  mypkgs:
     2   pkg.installed:
     3    - pkgs:
     4      - htop
     5      - vim
     6      - salt
     7
     8  ntop:
     9   pkg.removed
    10
    11  salt-master:
    12   service.running:
    13   - name: salt-master
    14   - enable: True

... note here how we build up the require sections.
... in pkg we have provided the id not the packages name.

    15   - require:
    16     - pkg: mypkgs

...

    17
    18  salt-minion:
    19   service.running:
    20   - name: salt-minion
    21   - enable: True
    22   - require:
    23     - pkg: mypkgs

... note here how we build up the watch section here
... in file we have provided the id of the file name not the 
... file name it self or full path of the filename.
... when salt finds any changes in the content of the file 
... /home/masum/masum.conf file it automatically restart 
... the service salt-minion.

    24   - watch:
    25     - file: /home/masum/masum.conf

...

    26
    27  /home/masum/masum.conf:
    28   file.managed:
    29   - source: salt://masum.conf
    30   - user: root
    31   - mode: 600

[root@saltstack salt]#

... to find the state modules.
... to find the functions in a state modules.
... to find the doc doc for a state modules.

[root@saltstack salt]# salt minion sys.list_state_modules
[root@saltstack salt]# salt minion sys.list_state_functions <module_name>
[root@saltstack salt]# salt minion sys.state_doc user.present 


ot@saltstack salt]# salt \* state.show_top
minion:
    ----------
    base:
        - pkg
        - epel
debian:
    ----------
    base:
        - pkg
localhost:
    ----------
    base:
        - pkg
splunk:
    ----------
    base:
        - pkg
        - epel
[root@saltstack salt]#

... normally salt run command as root user but if we need to run as other user 
... we can do like below.

[vagrant@master ~]$ sudo salt master\* cmd.run whoami runas=vagrant


